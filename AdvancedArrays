zen, life = [42, 43]
  This actually breaks down the array and places the info into the variables
  zen = 42
  life = 43

You can also do this with multidimentional arrays:
  zen, john = [[4,8], [3, 16], [23, 42, 15]]
  zen = [4, 8]
  john = [3, 16]

def zen
  [42, true]
end
x, y = zen
#x = 42
#y = true

[[1, 2, 3, 4], [42, 43]].each{|a, b| puts "#{a} #{b}"}
   stl:
     1 2
     42 43

zen, life, more = [42, 43]

puts zen   =>  42
puts life  =>  43
p more     =>  nil


**
The Splat
--
Ruby can use destruction by using the splat(*) operator

car, *cdr = [42, 43, 44]
car: 42
cdr: [43, 44]

*initial, last = [42, 43, 44]
initial: [42, 43]
last: 44

*initial, second_last, last = [42, 43, 44]
initial: [42]
second_last: 43
last: 44

The splat allows us to split the array up by the number of variables and slurp the rest of the arrayinto the second variable.

You can also use splat to slurp arguments passed into an array:
def zen(*args)
  [args.first, args.last]
end
p zen(42, 43, 44, 45, 46)

->outputs:
    [42, 46]


ary = [[4, 8], [15, 16], [23, 42]]
puts Hash[*ary.flatten]
outputs:
  {4=>8, 15=>16, 23=>42}


Arrays:
  array.count
  array.size
  array.length
  -> all return number of elements

You can also use count to find number of instances of a given element
puts [42, 8, 15, 16, 23, 42].count(42)
  -> returns 2 because there are two instances of the number 42

[4, 8, 15, 16, 23, 42].count { |e| e % 2 == 0 }
  -> prints the number of even elements in the array.

flatten returns a one-dimentional array:
  p [4, [8], [15], [16, [23, 42]]].flatten -->  [4, 8, 15, 16, 23, 42]

using flatten(1) will tell the function to only flatten one set of arrays.

compact method returns a new array with all the nil elements removed

.zip works like cross product:
  p [4, 8, 15, 16, 23, 42].zip([42, 23, 16, 15, 8])
  --> returns:
        [[4, 42], [8, 23], [15, 16], [16, 15], [23, 8], [42, nil]]


array.join(", ") -->  Converts the elements in an array to a comma delimited string

array.shift gets rid of the first element of an array and returns it:
  -> [4, 8, 15, 16, 23, 42].shift --> 4
                           .shift(2)-->[4, 8]

array.unshift adds element to the front:
  ->[8, 15, 16, 23, 42].unshift(4) --> [4, 8, 15, 16, 23, 42]
		       .unshift(4, 8, 15) ...


class Queue
  def initialize(size)
    @size = size
    @store = Array.new(@size)
    @head, @tail = -1, 0
  end
  
  def dequeue
    if empty?
      nil
    else
      @tail = @tail.succ

      dequeued = @store[@head]
      @store.unshift(nil)
      @store.pop
      dequeued
    end
  end
  
  def enqueue(element)
    if full? or element.nil?
      nil
    else
      @tail = @tail.pred
      @store[@tail] = element
      self 
    end
  end
  
  def size
    @size
  end
  
  private
  
  def empty?
    @head == -1 and @tail == 0
  end

  def full?
    @tail.abs == (@size)
  end
end

